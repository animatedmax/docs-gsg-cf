---
title: Running Cloud Foundry on Your Computer
owner: RelInt
---

This topic describes how to run Cloud Foundry (CF) on your computer through BOSH-Lite, a version of [BOSH](https://bosh.io/) that fits on a pre-built [Vagrant](https://www.vagrantup.com/intro/index.html) box, which you can use for exploration, development, and testing.

## <a id="prerequisites"></a> Prerequisites

To complete the procedures in this topic, you must have the following:

* [VirtualBox](https://www.virtualbox.org/)
* 16GB of RAM on your computer

Command line utilities:

* [BOSH Command Line Interface (CLI)](https://bosh.io/docs/bosh-cli.html)
* [CF CLI](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html)
* [Vagrant](https://www.vagrantup.com/)
* [Spiff](https://github.com/cloudfoundry-incubator/spiff)
* [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)


## <a id="bosh-lite"></a> Step 1: Create a BOSH-Lite VM

To spin up the BOSH-Lite VM with Vagrant, paste the following script into your command line:

<pre class="terminal">
git clone http<span>s</span>://github.com/cloudfoundry/bosh-lite.git
cd ./bosh-lite
vagrant up --provider=virtualbox
./bin/add-route
</pre>

## <a id="stemcell"></a> Step 2: Upload a Stemcell

In order to for the BOSH Director to spin up the VMs required for Cloud Foundry on the BOSH-Lite VM, we must provide it with the correct stemcell.

1. Using the BOSH CLI, tell BOSH the IP of the BOSH Director. For BOSH-Lite, the IP is set to `192.168.50.4`. 
	<pre class="terminal">$ bosh target 192.168.50.4 lite</pre>
	When prompted, enter username as `admin` and password as `admin`.

1. Upload the latest version of the BOSH-Lite stemcell named `warden` directly to BOSH-Lite. 
	<pre class="terminal">bosh upload stemcell http<span>s</span>://bosh.io/d/stemcells/bosh-warden-boshlite-ubuntu-trusty-go_agent</pre>

## <a id="releases"></a> Step 3: Download the BOSH Releases

In order to deploy software, BOSH requires a [release](http://bosh.io/docs/release.html). A release is a versioned collection of configuration properties, configuration templates, start up scripts, source code, binary artifacts, and anything else required to build and deploy software in a reproducible way. Cloud Foundry is made of two releases: `cf-release` and `diego-release`. 

1. To get the latest CF release, paste the following script into your command line:
	<pre class="terminal">
	git clone http<span>s</span>://github.com/cloudfoundry/cf-release.git
	cd ~/workspace/cf-release
	git checkout release-candidate
	./scripts/update
	</pre>
1. To get the latest Diego release, paste the following script into your command line:
	<pre class="terminal">
	git clone http<span>s</span>://github.com/cloudfoundry/diego-release.git
	cd ~/workspace/diego-release
	./scripts/update
	</pre>

## <a id="manifests"></a> Step 4: Generate Manifests

In order to deploy a release, BOSH requires a deployment manifest. The deployment manifest tells BOSH what resources to allocate and store. It tracks, manages, and updates software on the deployment VMs. 

1. Generate the CF manifest:
	<pre class="terminal">$ ./scripts/generate-bosh-lite-dev-manifest</pre>
1. Generate the Diego manifest:
	<pre class="terminal">$ ./scripts/generate-bosh-lite-manifests</pre>

## <a id="deploy"></a> Step 5: Deploy Releases

Now that you have your manifests, you're ready to deploy Cloud Foundry, which means deploying the Cloud Foundry release and the Diego Release. 

1. Change directories to the `cf-release` repository:
	<pre class="terminal">$ cd ~/workspace/cf-release</pre>
1. Provide the BOSH CLI with the deployment manifest you generated:
	<pre class="terminal">$ bosh deployment bosh-lite/deployments/cf.yml</pre>
1. 
bosh -n create release --force &&
bosh -n upload release &&
bosh -n deploy</pre>

1. Upload the latest garden-runc-release:
	<pre class="terminal">$ bosh upload release http<span>s</span>://bosh.io/d/github.com/cloudfoundry/garden-runc-release</pre>

1. Upload the latest cflinuxfs2-release:
	<pre class="terminal">$ bosh upload release http<span>s</span>://bosh.io/d/github.com/cloudfoundry/cflinuxfs2-release</pre>

1. Create, upload, and deploy the Diego release:
	<pre class="terminal">cd ~/workspace/diego-release
bosh deployment bosh-lite/deployments/diego.yml
bosh -n create release --force &&
bosh -n upload release &&
bosh -n deploy</pre>

## <a id="verif"></a>Step 6: Verify CF and Diego deployments

1. Verify the deployments with BOSH. You should see two deployments called ‘cf-warden’ and ‘cf-warden-diego’ after executing this command.
	<pre class="terminal">$ bosh deployments</pre>
 
1. Verify the state of each deployment’s VMs with BOSH. You should see VMs under each deployment with the state ‘running’ after executing this command.
	<pre class="terminal">$ bosh vms</pre>

## <a id="push"></a>Step 7: Push an App
Log in to the newly deployed CF instance with the cf CLI
$ cf login -a api.bosh-lite.com -u admin -p admin --skip-ssl-validation
NOTE: Install the latest cf CLI following the instructions in this README.
 
Create org and space
$ cf create-org my-org && cf target -o my-org && cf create-space space-one && cf target -s space-one
 
Clone and push a sample application
$ cd ~/workspace
$ git clone https://github.com/cloudfoundry-samples/cf-sample-app-spring.git
$ cd cf-sample-app-spring
$ cf push cf-spring --no-manifest
 
Open the sample app in your web browser
Open http://cf-spring.bosh-lite.com in your web browser.
NOTE: For more information on how CF and Diego work together to deploy and scale applications, check out the documentation on Diego’s architecture.
